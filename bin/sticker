#!/usr/bin/perl

use strict;
use warnings;
use feature "state", "say";
use Getopt::Long;
use Mojo::UserAgent;
use Mojo::DOM;
use Mojo::JSON 'decode_json';
use Mojo::ByteStream 'b';
use Mojo::Collection 'c';
use Path::Tiny;

my $base = path('~/.mbm/');
$base->mkpath();

my %default_config = (
    stopwords => [
        qw(a about above after again against all am an and any are aren't as at be because been before being below between both but by can can't cannot could couldn't did didn't do does doesn't doing don't down during each few for from further had hadn't has hasn't have haven't having he he'd he'll he's her here here's hers herself him himself his how how's i i'd i'll i'm i've if in into is isn't it it's its itself let's me more most mustn't my myself no nor not of off on once only or other ought our ours ourselves out over own same shan't she she'd she'll she's should shouldn't so some such than that that's the their theirs them themselves then there there's these they they'd they'll they're they've this those through to too under until up use very was wasn't we we'd we'll we're we've were weren't what what's when when's where where's which while who who's whom why why's will with won't would wouldn't you you'd you'll you're you've your yours yourself yourselves)
    ],
    handler => [qw(iceweasel -new-tab)],
    worker  => 5,
);

my $config_file = $base->child('mbmrc');
my $config;
if ( $config_file->exists ) {
    my $json = eval { decode_json( $config_file->slurp_utf8 ) };
    if ($json) {
        $config = { %default_config, %$json };
    }
}

for (qw(title content url)) {
    $base->child($_)->mkpath();
}

my $mode = shift;

my %dispatch = (
    add    => \&mode_add,
    import => \&mode_import,
    edit   => \&mode_edit,
    tag    => \&mode_tag,
    search => \&mode_search,
    open   => \&mode_open,
);

if ( exists $dispatch{$mode} ) {
    $dispatch{$mode}->(@ARGV);
}
else {
    die "$0: Unknown mode $mode\n";
}

sub mode_add {
    my $url = shift;
    add_urls( [$url] );
}

sub mode_import {
    my $file    = shift;
    my $content = path($file)->slurp_utf8;
    my $dom     = Mojo::DOM->new($content);
    my $urls =
      $dom->find('a["href"]')->map( attr => 'href' )->grep( sub { /^http/ } )
      ->to_array;
    add_urls($urls);
}

sub mode_edit {
    my ($url) = @_;
    my $id    = b($url)->sha1_sum;
    my $file  = $base->child('url')->child($id);
    system( 'vi', $file );
}

sub mode_tag {
    my ( $url, @new_tags ) = @_;
    my $id = b($url)->sha1_sum;
    my @old_tags = b( db_get( $base, $id, 'tag' ) )->split(' ');
    db_set( $base, $id, 'tag', c( @old_tags, @new_tags )->uniq );
}

sub mode_open {
    my $num  = shift;
    my @urls = $base->child('mbm_last_search')->lines();
    system( @{ $config->{handler} }, $urls[ $num - 1 ] );
}

sub mode_search {
    my @terms = @_ ? @_ : '';
    my $matches = db_search( $base, [qw(title url content)], $terms[0] );
    my $hist_fh = $base->child('mbm_last_search')->openw_utf8();

    my $i   = 0;
    my $len = length(@$matches);
    for my $id (@$matches) {
        my $url   = db_get( $base, $id, 'url' );
        my $title = db_get( $base, $id, 'title' );
        my $line = sprintf( "%*d $url - $title", $len, ++$i );
        print b($line)->encode . "\n";
        print {$hist_fh} "$url\n";
    }
}

# TODO Caching

sub _db_parse_file {
    my $file = shift;
    my %attrs;
    if ( $file->exists ) {

        # TODO Line folding
        my $content = $file->slurp_utf8;
        %attrs = ( $content =~ /^(\S+?):\s*(.*)/gm );
    }
    return %attrs;
}

sub db_to_key {
    my $string = shift;
    return b($string)->sha1_sum;
}

sub db_file_for_key {
    my ( $base, $key ) = @_;
    return $base->child('url')->child($key);
}

sub db_get {
    my ( $base, $id, @props ) = @_;
    my %attrs = _db_parse_file( $base->child('url')->child($id) );
    return @attrs{@props};
}

sub db_set {
    my ( $base, $id, %new_attrs ) = @_;
    my $file  = $base->child('url')->child($id);
    my %attrs = _db_parse_file( $base->child('url')->child($id) );
    %attrs = ( %attrs, %new_attrs );

    # TODO Line folding
    return $file->spew_utf8(
        join( "\n", map { $_ . ': ' . $attrs{$_} } keys %attrs ) );
}

sub db_search {
    my ( $base, $props, $term ) = @_;
    local ( @ARGV, $_ ) = $base->child('url')->children;
    return if !@ARGV;
    my @matches;
    while (<>) {
        s/^(\S+?):\s+//;
        if (/$term/o) {
            push @matches, $ARGV;
            close ARGV;
            next;
        }
    }
    return c(@matches)->map('basename')->uniq->to_array;
}

sub add_urls {
    my $urls = shift;
    state $ua    = Mojo::UserAgent->new()->max_redirects(5);
    state $idle  = $config->{worker};
    state $delay = Mojo::IOLoop->delay();

    while ( $idle and my $url = shift @$urls ) {
	$url = normalize_url($url);
        $idle--;
        my $cb = $delay->begin;
        $ua->get(
            $url => sub {
                my ( $ua, $tx ) = @_;
                $idle++;
                process_tx( $tx, $url );

                # refresh worker pool
                add_urls($urls);
                $cb->();
            }
        );
    }
    $delay->wait unless $delay->ioloop->is_running;
}

sub process_tx {
    my ( $tx, $url ) = @_;
    if ( my $res = $tx->success ) {
        my ( $title, $content );
        my $dom = $res->dom;
        if ($dom) {
            $title = $dom->at('title');
            if ($title) {
                $title = b( $title->all_text() )->squish;
            }
            $dom->find('head')->map('remove');
            $dom->find('script')->map('remove');
            my %stopword =
              map { $_ => 1 } @{ $config->{stopwords} };

            ## There are many pages without a body-tag, so i just use all the
            ## text in the dom as content, TODO remove head before all_text()?

            $content = $dom->all_text();
            if ($content) {
                $content =
                  b($content)->squish->split(qr/[[:punct:][:space:]]+/)
                  ->map( sub        { lc } )
                  ->uniq->grep( sub { not exists $stopword{$_} } )
                  ->grep( sub       { length > 1 } )->join(' ');
            }
            else {
                warn "No words for $url\n";
            }
        }
        my $id = b($url)->sha1_sum;

        db_set(
            $base, $id,
            title   => $title   || '',
            content => $content || '',
            url     => $url
        );

    }
    else {
        my $err = $tx->error;
        print STDERR "Error for $url: ";
        if ( $err->{code} ) {
            warn "code $err->{code} response: $err->{message}\n";
        }
        else {
            warn "Connection error: $err->{message}\n";
        }

    }
}

sub normalize_url {
    my $url_string = shift;
    my $url        = Mojo::URL->new($url_string);
    $url->path('/')      if $url->path eq '';
    $url->scheme('http') if $url->scheme eq '';
    $url->port(undef)    if $url->port == 80;
    return $url;
}

exit 0;

__END__

=pod
